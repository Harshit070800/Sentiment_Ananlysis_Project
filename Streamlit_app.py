{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "84c1bcdf-cc2b-4fcf-a137-44dc1562ec30",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2024-11-20 17:27:59.410 WARNING streamlit.runtime.scriptrunner_utils.script_run_context: Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-20 17:27:59.591 \n",
      "  \u001b[33m\u001b[1mWarning:\u001b[0m to view this Streamlit app on a browser, run it with the following\n",
      "  command:\n",
      "\n",
      "    streamlit run C:\\Users\\Harshit Arora\\Anaconda3\\Lib\\site-packages\\ipykernel_launcher.py [ARGUMENTS]\n",
      "2024-11-20 17:27:59.591 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-20 17:27:59.593 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-20 17:28:00.094 Thread 'Thread-5': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-20 17:28:00.096 Thread 'Thread-5': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "WARNING:absl:Compiled the loaded model, but the compiled metrics have yet to be built. `model.compile_metrics` will be empty until you train or evaluate the model.\n",
      "2024-11-20 17:28:00.877 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-20 17:28:00.878 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-20 17:28:00.880 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-20 17:28:00.881 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-20 17:28:00.882 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-20 17:28:00.883 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-20 17:28:00.883 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-20 17:28:00.884 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-20 17:28:00.885 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-20 17:28:00.886 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-20 17:28:00.886 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-20 17:28:00.887 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-20 17:28:00.887 Session state does not function when running a script without `streamlit run`\n",
      "2024-11-20 17:28:00.889 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-20 17:28:00.889 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-20 17:28:00.890 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-20 17:28:00.891 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-20 17:28:00.891 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-20 17:28:00.892 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-20 17:28:00.893 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n"
     ]
    }
   ],
   "source": [
    "import streamlit as st\n",
    "import numpy as np\n",
    "import tensorflow as tf\n",
    "from transformers import BertTokenizer\n",
    "from vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "\n",
    "# Load the trained CNN model (update this path to your model's location)\n",
    "MODEL_PATH = 'D:/Sentiment_Analysis_Project/data/saved_cnn_model/cnn_model.h5'\n",
    "\n",
    "# Load necessary models and tools\n",
    "@st.cache_resource\n",
    "def load_models_and_tools():\n",
    "    # Initialize VADER analyzer\n",
    "    vader_analyzer = SentimentIntensityAnalyzer()\n",
    "\n",
    "    # Initialize BERT tokenizer (we are not using BERT for prediction)\n",
    "    tokenizer = BertTokenizer.from_pretrained('bert-base-uncased')\n",
    "\n",
    "    # Load the pre-trained CNN model\n",
    "    model_cnn = tf.keras.models.load_model(MODEL_PATH)\n",
    "\n",
    "    # Load LabelEncoder\n",
    "    label_encoder = LabelEncoder()\n",
    "    label_encoder.classes_ = np.array(['Negative', 'Neutral', 'Positive'])\n",
    "\n",
    "    return model_cnn, tokenizer, vader_analyzer, label_encoder\n",
    "\n",
    "# Load models and tools\n",
    "model_cnn, tokenizer, vader_analyzer, label_encoder = load_models_and_tools()\n",
    "\n",
    "# Define preprocessing function for CNN\n",
    "def preprocess_review_cnn(review, tokenizer, max_len=128):\n",
    "    encoded_review = tokenizer.encode_plus(\n",
    "        review,\n",
    "        add_special_tokens=True,\n",
    "        max_length=max_len,\n",
    "        padding='max_length',\n",
    "        truncation=True,\n",
    "        return_tensors='np'\n",
    "    )\n",
    "    return encoded_review['input_ids']\n",
    "\n",
    "# Define VADER sentiment classifier\n",
    "def classify_sentiment_vader(score):\n",
    "    if score > 0.2:\n",
    "        return 'Positive'\n",
    "    elif score < -0.2:\n",
    "        return 'Negative'\n",
    "    else:\n",
    "        return 'Neutral'\n",
    "\n",
    "# Map VADER polarity score to rating\n",
    "def map_polarity_to_rating(score):\n",
    "    if score > 0.2:\n",
    "        return 5  # Excellent\n",
    "    elif 0.1 < score <= 0.2:\n",
    "        return 4  # Good\n",
    "    elif 0 <= score <= 0.1:\n",
    "        return 3  # Average\n",
    "    elif -0.1 < score < 0:\n",
    "        return 2  # Poor\n",
    "    else:\n",
    "        return 1  # Very Poor\n",
    "\n",
    "# Simplified prediction function for CNN output\n",
    "def predict_sentiment_cnn(review, model, tokenizer, label_encoder, max_len=128):\n",
    "    preprocessed_review = preprocess_review_cnn(review, tokenizer, max_len)\n",
    "    preprocessed_review = np.array(preprocessed_review).reshape(1, max_len)\n",
    "    prediction = model.predict(preprocessed_review)\n",
    "    predicted_label = np.argmax(prediction, axis=1)[0]\n",
    "    return label_encoder.inverse_transform([predicted_label])[0]\n",
    "\n",
    "# Define the combined prediction function for CNN and VADER\n",
    "def predict_sentiment_combined(review, model_cnn, tokenizer, label_encoder, vader_analyzer, max_len=128):\n",
    "    cnn_sentiment = predict_sentiment_cnn(review, model_cnn, tokenizer, label_encoder, max_len)\n",
    "    vader_polarity = vader_analyzer.polarity_scores(review)['compound']\n",
    "    vader_sentiment = classify_sentiment_vader(vader_polarity)\n",
    "    rating = map_polarity_to_rating(vader_polarity)\n",
    "    \n",
    "    return {\n",
    "        \"review\": review,\n",
    "        \"cnn_sentiment\": cnn_sentiment,\n",
    "        \"vader_sentiment\": vader_sentiment,\n",
    "        \"vader_polarity_score\": vader_polarity,\n",
    "        \"predicted_rating\": rating\n",
    "    }\n",
    "\n",
    "# Streamlit app interface\n",
    "st.title(\"Sentiment Analysis App\")\n",
    "st.write(\"Enter a text review, and the app will analyze its sentiment using CNN and VADER.\")\n",
    "\n",
    "# Text input from the user\n",
    "review = st.text_area(\"Enter your review:\", placeholder=\"Type your review here...\")\n",
    "\n",
    "if st.button(\"Analyze\"):\n",
    "    if review.strip():\n",
    "        with st.spinner('Analyzing sentiment...'):\n",
    "            result = predict_sentiment_combined(review, model_cnn, tokenizer, label_encoder, vader_analyzer, max_len=128)\n",
    "        \n",
    "        st.write(f\"**Review:** {result['review']}\")\n",
    "        st.write(f\"**CNN Sentiment:** {result['cnn_sentiment']}\")\n",
    "        st.write(f\"**VADER Sentiment:** {result['vader_sentiment']}\")\n",
    "        st.write(f\"**VADER Polarity Score:** {result['vader_polarity_score']}\")\n",
    "        st.write(f\"**Predicted Rating:** {result['predicted_rating']} stars\")\n",
    "    else:\n",
    "        st.warning(\"Please enter a valid review.\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": None,
   "id": "f83046ac-bf1b-4cfd-9e36-399c881fd13d",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
